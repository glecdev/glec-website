generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model analytics_conversions {
  id                 String             @id
  session_id         String
  conversion_type    String
  form_data          Json?
  value              Float?
  created_at         DateTime           @default(now())
  analytics_sessions analytics_sessions @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  @@index([conversion_type])
  @@index([created_at(sort: Desc)])
  @@index([session_id])
}

model analytics_events {
  id                 String             @id
  session_id         String
  event_type         String
  event_name         String
  event_data         Json?
  page               String
  element_id         String?
  element_text       String?
  created_at         DateTime           @default(now())
  analytics_sessions analytics_sessions @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([event_name])
  @@index([event_type])
  @@index([session_id])
}

model analytics_pageviews {
  id                 String             @id
  session_id         String
  path               String
  title              String
  referrer           String?
  duration           Int?
  scroll_depth       Int?
  exit_page          Boolean            @default(false)
  created_at         DateTime           @default(now())
  analytics_sessions analytics_sessions @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([path])
  @@index([session_id])
}

model analytics_sessions {
  id                    String                  @id
  session_id            String                  @unique
  user_id               String?
  ip_address            String
  user_agent            String
  country               String?
  city                  String?
  device                String
  browser               String
  os                    String
  referrer              String?
  landing_page          String
  cookie_consent        Json
  created_at            DateTime                @default(now())
  updated_at            DateTime
  analytics_conversions analytics_conversions[]
  analytics_events      analytics_events[]
  analytics_pageviews   analytics_pageviews[]

  @@index([browser])
  @@index([created_at(sort: Desc)])
  @@index([device])
  @@index([session_id])
}

model audit_logs {
  id          String      @id
  user_id     String
  action      AuditAction
  resource    String
  resource_id String?
  changes     Json?
  ip_address  String
  user_agent  String
  created_at  DateTime    @default(now())
  users       users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([created_at(sort: Desc)])
  @@index([resource])
  @@index([user_id, created_at(sort: Desc)])
}

model automation_rules {
  rule_id               String          @id
  rule_name             String          @unique
  lead_source_type      LeadSourceType
  trigger_type          TriggerType
  trigger_delay_minutes Int             @default(0)
  trigger_condition     Json?
  template_id           String
  max_sends_per_lead    Int             @default(1)
  max_sends_per_day     Int             @default(2)
  cooldown_minutes      Int             @default(1440)
  priority              Int             @default(3)
  is_active             Boolean         @default(true)
  created_at            DateTime        @default(now())
  updated_at            DateTime
  email_templates       email_templates @relation(fields: [template_id], references: [template_id], onDelete: Cascade)
  email_sends           email_sends[]

  @@index([is_active])
  @@index([lead_source_type])
  @@index([trigger_type])
}

model blogs {
  id            String        @id
  title         String
  slug          String        @unique
  content       String
  excerpt       String?
  status        ContentStatus @default(DRAFT)
  thumbnail_url String?
  tags          String[]      @default([])
  view_count    Int           @default(0)
  reading_time  Int?
  published_at  DateTime?
  author_id     String
  created_at    DateTime      @default(now())
  updated_at    DateTime
  deleted_at    DateTime?
  users         users         @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([status, published_at(sort: Desc)])
  @@index([tags])
}

model contacts {
  id              String             @id
  company_name    String
  contact_name    String
  email           String
  phone           String
  inquiry_type    ContactInquiryType
  message         String
  privacy_consent Boolean
  status          ContactStatus      @default(NEW)
  ip_address      String?
  notes           String?
  assigned_to_id  String?
  created_at      DateTime           @default(now())
  updated_at      DateTime
  users           users?             @relation(fields: [assigned_to_id], references: [id])

  @@index([email])
  @@index([status, created_at(sort: Desc)])
}

model content_rankings {
  id             String     @id
  content_type   String
  content_id     String
  content_title  String
  view_count     Int        @default(0)
  click_count    Int        @default(0)
  download_count Int        @default(0)
  period_type    PeriodType
  period_start   DateTime
  period_end     DateTime
  rank           Int
  previous_rank  Int?
  rank_change    Int?
  created_at     DateTime   @default(now())
  updated_at     DateTime

  @@unique([content_type, content_id, period_type, period_start])
  @@index([period_type, period_start(sort: Desc)])
  @@index([rank])
}

model demo_requests {
  id                 String            @id
  company_name       String
  contact_name       String
  email              String
  phone              String
  company_size       String
  product_interests  String[]
  use_case           String
  current_solution   String?
  monthly_shipments  String
  preferred_date     DateTime
  preferred_time     String
  additional_message String?
  status             DemoRequestStatus @default(NEW)
  privacy_consent    Boolean
  ip_address         String?
  notes              String?
  assigned_to_id     String?
  created_at         DateTime          @default(now())
  updated_at         DateTime
  users              users?            @relation(fields: [assigned_to_id], references: [id])

  @@index([email])
  @@index([preferred_date])
  @@index([status, created_at(sort: Desc)])
}

model email_metrics {
  metric_id          String          @id
  template_id        String
  date               DateTime        @db.Date
  hour               Int?
  sent_count         Int             @default(0)
  delivered_count    Int             @default(0)
  bounced_count      Int             @default(0)
  opened_count       Int             @default(0)
  clicked_count      Int             @default(0)
  converted_count    Int             @default(0)
  unsubscribed_count Int             @default(0)
  spam_count         Int             @default(0)
  created_at         DateTime        @default(now())
  updated_at         DateTime
  email_templates    email_templates @relation(fields: [template_id], references: [template_id], onDelete: Cascade)

  @@unique([template_id, date, hour])
  @@index([date])
  @@index([template_id])
}

model email_sends {
  email_send_id    String           @id
  lead_id          String
  rule_id          String
  template_id      String
  resend_email_id  String?
  recipient_email  String
  subject          String
  status           EmailSendStatus  @default(PENDING)
  sent_at          DateTime?
  delivered_at     DateTime?
  opened_at        DateTime?
  clicked_at       DateTime?
  ab_variant       String?
  created_at       DateTime         @default(now())
  updated_at       DateTime
  automation_rules automation_rules @relation(fields: [rule_id], references: [rule_id], onDelete: Cascade)
  email_templates  email_templates  @relation(fields: [template_id], references: [template_id], onDelete: Cascade)

  @@index([lead_id])
  @@index([rule_id])
  @@index([sent_at])
  @@index([status])
  @@index([template_id])
}

model email_templates {
  template_id           String             @id
  template_name         String             @unique
  template_type         EmailTemplateType
  lead_source_type      LeadSourceType
  subject               String
  html_body             String
  text_body             String
  variables             Json               @default("[]")
  trigger_type          TriggerType
  trigger_delay_minutes Int                @default(0)
  is_ab_test            Boolean            @default(false)
  ab_variant_id         String?
  ab_traffic_split      Int                @default(50)
  is_active             Boolean            @default(true)
  version               Int                @default(1)
  created_at            DateTime           @default(now())
  updated_at            DateTime
  automation_rules      automation_rules[]
  email_metrics         email_metrics[]
  email_sends           email_sends[]
  email_templates       email_templates?   @relation("email_templatesToemail_templates", fields: [ab_variant_id], references: [template_id])
  other_email_templates email_templates[]  @relation("email_templatesToemail_templates")

  @@index([is_active])
  @@index([lead_source_type])
  @@index([template_type])
}

model event_registrations {
  id                String             @id
  name              String
  email             String
  phone             String
  company           String?
  job_title         String?
  message           String?
  status            RegistrationStatus @default(PENDING)
  privacy_consent   Boolean
  marketing_consent Boolean            @default(false)
  admin_notes       String?
  event_id          String
  created_at        DateTime           @default(now())
  updated_at        DateTime
  events            events             @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([email])
  @@index([event_id, status])
}

model events {
  id                  String                @id
  title               String
  slug                String                @unique
  description         String
  status              EventStatus           @default(DRAFT)
  start_date          DateTime
  end_date            DateTime
  location            String
  location_details    String?
  thumbnail_url       String?
  max_participants    Int?
  view_count          Int                   @default(0)
  published_at        DateTime?
  author_id           String
  created_at          DateTime              @default(now())
  updated_at          DateTime
  deleted_at          DateTime?
  event_registrations event_registrations[]
  users               users                 @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([status, start_date])
}

model libraries {
  id             String        @id
  title          String
  slug           String        @unique
  description    String?
  category       String
  file_type      String
  thumbnail_url  String?
  file_url       String
  file_size      String
  tags           String[]      @default([])
  page_count     Int?
  is_gated       Boolean       @default(true)
  download_count Int           @default(0)
  status         ContentStatus @default(DRAFT)
  published_at   DateTime?
  author_id      String
  created_at     DateTime      @default(now())
  updated_at     DateTime
  users          users         @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([slug])
  @@index([status, published_at(sort: Desc)])
  @@index([tags])
}

model media {
  id                String   @id
  filename          String
  original_filename String
  url               String
  mime_type         String
  size_bytes        Int
  width             Int?
  height            Int?
  alt_text          String?
  uploaded_by_id    String
  created_at        DateTime @default(now())
  users             users    @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([mime_type])
}

model newsletter_subscriptions {
  id                 String           @id
  email              String           @unique
  status             NewsletterStatus @default(ACTIVE)
  verification_token String?
  verified_at        DateTime?
  unsubscribed_at    DateTime?
  created_at         DateTime         @default(now())
  updated_at         DateTime

  @@index([email])
  @@index([status])
}

model notices {
  id            String         @id
  title         String
  slug          String         @unique
  content       String
  excerpt       String?
  status        ContentStatus  @default(DRAFT)
  category      NoticeCategory @default(GENERAL)
  thumbnail_url String?
  view_count    Int            @default(0)
  published_at  DateTime?
  author_id     String
  created_at    DateTime       @default(now())
  updated_at    DateTime
  deleted_at    DateTime?
  users         users          @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([category, status])
  @@index([slug])
  @@index([status, published_at(sort: Desc)])
}

model partnerships {
  id               String            @id
  company_name     String
  contact_name     String
  email            String
  partnership_type PartnershipType
  proposal         String
  status           PartnershipStatus @default(NEW)
  admin_notes      String?
  created_at       DateTime          @default(now())
  updated_at       DateTime

  @@index([email])
  @@index([status, created_at(sort: Desc)])
}

model popups {
  id                String           @id
  title             String
  content           String?
  image_url         String?
  link_url          String?
  display_type      PopupDisplayType @default(modal)
  is_active         Boolean          @default(false)
  start_date        DateTime?
  end_date          DateTime?
  z_index           Int              @default(1000)
  show_once_per_day Boolean          @default(true)
  position          String?
  size              String?
  background_color  String           @default("#ffffff")
  deleted_at        DateTime?
  created_at        DateTime         @default(now())
  updated_at        DateTime

  @@index([is_active, deleted_at])
  @@index([start_date, end_date])
}

model presses {
  id            String        @id
  title         String
  slug          String        @unique
  content       String
  excerpt       String?
  status        ContentStatus @default(DRAFT)
  thumbnail_url String?
  media_outlet  String?
  external_url  String?
  view_count    Int           @default(0)
  published_at  DateTime?
  author_id     String
  created_at    DateTime      @default(now())
  updated_at    DateTime
  deleted_at    DateTime?
  users         users         @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([status, published_at(sort: Desc)])
}

model users {
  id            String          @id
  email         String          @unique
  name          String
  password_hash String
  role          UserRole        @default(CONTENT_MANAGER)
  phone         String?
  last_login_at DateTime?
  created_at    DateTime        @default(now())
  updated_at    DateTime
  audit_logs    audit_logs[]
  blogs         blogs[]
  contacts      contacts[]
  demo_requests demo_requests[]
  events        events[]
  libraries     libraries[]
  media         media[]
  notices       notices[]
  presses       presses[]
  videos        videos[]
}

model videos {
  id               String        @id
  title            String
  slug             String        @unique
  description      String?
  youtube_url      String
  youtube_video_id String
  thumbnail_url    String
  channel_name     String?
  duration         String?
  view_count       Int           @default(0)
  status           ContentStatus @default(DRAFT)
  tab              String        @default("전체")
  published_at     DateTime?
  author_id        String
  created_at       DateTime      @default(now())
  updated_at       DateTime
  users            users         @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([status, tab, published_at(sort: Desc)])
}

enum AuditAction {
  LOGIN
  CREATE
  UPDATE
  DELETE
}

enum ContactInquiryType {
  PRODUCT
  PARTNERSHIP
  SUPPORT
  GENERAL
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  SPAM
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DemoRequestStatus {
  NEW
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum EmailSendStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  SPAM
  FAILED
}

enum EmailTemplateType {
  WELCOME
  CONFIRMATION
  FOLLOW_UP
  NURTURE
  RE_ENGAGEMENT
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum LeadSourceType {
  LIBRARY_LEAD
  CONTACT_FORM
  DEMO_REQUEST
  EVENT_REGISTRATION
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
}

enum NoticeCategory {
  GENERAL
  PRODUCT
  EVENT
  PRESS
}

enum PartnershipStatus {
  NEW
  IN_PROGRESS
  ACCEPTED
  REJECTED
}

enum PartnershipType {
  tech
  reseller
  consulting
  other
}

enum PeriodType {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum PopupDisplayType {
  modal
  banner
  corner
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TriggerType {
  LEAD_CREATED
  EMAIL_OPENED
  EMAIL_CLICKED
  TIME_ELAPSED
  STATUS_CHANGED
}

enum UserRole {
  SUPER_ADMIN
  CONTENT_MANAGER
  ANALYST
}

// GLEC Website Database Schema
// Version: 1.0.0
// Database: Neon PostgreSQL (Serverless)
// Based on: GLEC-API-Specification.yaml

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================
// ENUMS
// ============================================================

enum UserRole {
  SUPER_ADMIN
  CONTENT_MANAGER
  ANALYST
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NoticeCategory {
  GENERAL
  PRODUCT
  EVENT
  PRESS
}

enum ContactInquiryType {
  PRODUCT
  PARTNERSHIP
  SUPPORT
  GENERAL
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  SPAM
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AuditAction {
  LOGIN
  CREATE
  UPDATE
  DELETE
}

enum PeriodType {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

// ============================================================
// USER MODEL
// ============================================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  passwordHash  String    @map("password_hash")
  role          UserRole  @default(CONTENT_MANAGER)
  phone         String?
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  notices       Notice[]
  presses       Press[]
  videos        Video[]
  blogs         Blog[]
  libraries     Library[]
  mediaUploads  Media[]   @relation("MediaUploader")
  assignedContacts Contact[] @relation("AssignedTo")
  events        Event[]
  assignedDemoRequests DemoRequest[] @relation("DemoAssignedTo")
  auditLogs     AuditLog[]

  @@map("users")
}

// ============================================================
// CONTENT MODELS
// ============================================================

model Notice {
  id            String         @id @default(uuid())
  title         String
  slug          String         @unique
  content       String         @db.Text
  excerpt       String?
  status        ContentStatus  @default(DRAFT)
  category      NoticeCategory @default(GENERAL)
  thumbnailUrl  String?        @map("thumbnail_url")
  viewCount     Int            @default(0) @map("view_count")
  publishedAt   DateTime?      @map("published_at")

  // Relations
  authorId      String         @map("author_id")
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")

  @@index([slug])
  @@index([status, publishedAt(sort: Desc)])
  @@index([category, status])
  @@map("notices")
}

model Press {
  id            String        @id @default(uuid())
  title         String
  slug          String        @unique
  content       String        @db.Text
  excerpt       String?
  status        ContentStatus @default(DRAFT)
  thumbnailUrl  String?       @map("thumbnail_url")
  mediaOutlet   String?       @map("media_outlet") // 언론사
  externalUrl   String?       @map("external_url") // 원문 링크
  viewCount     Int           @default(0) @map("view_count")
  publishedAt   DateTime?     @map("published_at")

  // Relations
  authorId      String        @map("author_id")
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")

  @@index([slug])
  @@index([status, publishedAt(sort: Desc)])
  @@map("presses")
}

model Video {
  id              String        @id @default(uuid())
  title           String
  slug            String        @unique
  description     String?       @db.Text
  youtubeUrl      String        @map("youtube_url")
  youtubeVideoId  String        @map("youtube_video_id")
  thumbnailUrl    String        @map("thumbnail_url") // OpenGraph image
  channelName     String?       @map("channel_name")
  duration        String?       // e.g., "5:32"
  viewCount       Int           @default(0) @map("view_count")
  status          ContentStatus @default(DRAFT)
  tab             String        @default("전체") // 전체, 글렉, 팟캐스트
  publishedAt     DateTime?     @map("published_at")

  // Relations
  authorId        String        @map("author_id")
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@index([slug])
  @@index([status, tab, publishedAt(sort: Desc)])
  @@map("videos")
}

model Blog {
  id            String        @id @default(uuid())
  title         String
  slug          String        @unique
  content       String        @db.Text
  excerpt       String?
  status        ContentStatus @default(DRAFT)
  thumbnailUrl  String?       @map("thumbnail_url")
  tags          String[]      @default([])
  viewCount     Int           @default(0) @map("view_count")
  readingTime   Int?          @map("reading_time") // minutes
  publishedAt   DateTime?     @map("published_at")

  // Relations
  authorId      String        @map("author_id")
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")

  @@index([slug])
  @@index([status, publishedAt(sort: Desc)])
  @@index([tags])
  @@map("blogs")
}

model Library {
  id            String        @id @default(uuid())
  title         String
  slug          String        @unique
  description   String?       @db.Text
  category      String        // TECHNICAL, GUIDE, NEWS, CASE_STUDY, TUTORIAL, WHITEPAPER, REPORT, RESEARCH
  fileType      String        @map("file_type") // PDF, DOCX, XLSX, PPTX
  thumbnailUrl  String?       @map("thumbnail_url")
  fileUrl       String        @map("file_url")
  fileSize      String        @map("file_size") // e.g., "2.5 MB"
  tags          String[]      @default([])
  pageCount     Int?          @map("page_count")
  isGated       Boolean       @default(true) @map("is_gated") // true = 열람 신청 필요
  downloadCount Int           @default(0) @map("download_count")
  status        ContentStatus @default(DRAFT)
  publishedAt   DateTime?     @map("published_at")

  // Relations
  authorId      String        @map("author_id")
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@index([slug])
  @@index([status, publishedAt(sort: Desc)])
  @@index([category])
  @@index([tags])
  @@map("libraries")
}

// ============================================================
// CONTACT & NEWSLETTER
// ============================================================

model Contact {
  id              String              @id @default(uuid())
  companyName     String              @map("company_name")
  contactName     String              @map("contact_name")
  email           String
  phone           String
  inquiryType     ContactInquiryType  @map("inquiry_type")
  message         String              @db.Text
  privacyConsent  Boolean             @map("privacy_consent")
  status          ContactStatus       @default(NEW)
  ipAddress       String?             @map("ip_address")
  notes           String?             @db.Text // 관리자 메모

  // Relations
  assignedToId    String?             @map("assigned_to_id")
  assignedTo      User?               @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)

  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")

  @@index([status, createdAt(sort: Desc)])
  @@index([email])
  @@map("contacts")
}

model NewsletterSubscription {
  id                String            @id @default(uuid())
  email             String            @unique
  status            NewsletterStatus  @default(ACTIVE)
  verificationToken String?           @map("verification_token")
  verifiedAt        DateTime?         @map("verified_at")
  unsubscribedAt    DateTime?         @map("unsubscribed_at")

  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@index([email])
  @@index([status])
  @@map("newsletter_subscriptions")
}

// ============================================================
// MEDIA
// ============================================================

model Media {
  id                String   @id @default(uuid())
  filename          String
  originalFilename  String   @map("original_filename")
  url               String
  mimeType          String   @map("mime_type")
  sizeBytes         Int      @map("size_bytes")
  width             Int?
  height            Int?
  altText           String?  @map("alt_text")

  // Relations
  uploadedById      String   @map("uploaded_by_id")
  uploadedBy        User     @relation("MediaUploader", fields: [uploadedById], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now()) @map("created_at")

  @@index([mimeType])
  @@index([createdAt(sort: Desc)])
  @@map("media")
}

// ============================================================
// EVENTS
// ============================================================

model Event {
  id                String        @id @default(uuid())
  title             String
  slug              String        @unique
  description       String        @db.Text
  status            EventStatus   @default(DRAFT)
  startDate         DateTime      @map("start_date")
  endDate           DateTime      @map("end_date")
  location          String
  locationDetails   String?       @map("location_details") @db.Text
  thumbnailUrl      String?       @map("thumbnail_url")
  maxParticipants   Int?          @map("max_participants")
  viewCount         Int           @default(0) @map("view_count")
  publishedAt       DateTime?     @map("published_at")

  // Relations
  authorId          String        @map("author_id")
  author            User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  registrations     EventRegistration[]

  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  deletedAt         DateTime?     @map("deleted_at")

  @@index([slug])
  @@index([status, startDate(sort: Asc)])
  @@map("events")
}

model EventRegistration {
  id                String              @id @default(uuid())
  name              String
  email             String
  phone             String
  company           String?
  jobTitle          String?             @map("job_title")
  message           String?             @db.Text
  status            RegistrationStatus  @default(PENDING)
  privacyConsent    Boolean             @map("privacy_consent")
  marketingConsent  Boolean             @default(false) @map("marketing_consent")
  adminNotes        String?             @map("admin_notes") @db.Text

  // Relations
  eventId           String              @map("event_id")
  event             Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@index([eventId, status])
  @@index([email])
  @@index([createdAt(sort: Desc)])
  @@map("event_registrations")
}

// ============================================================
// ANALYTICS MODELS
// ============================================================

model AnalyticsSession {
  id            String   @id @default(uuid())
  sessionId     String   @unique @map("session_id")
  userId        String?  @map("user_id") // Nullable for anonymous users
  ipAddress     String   @map("ip_address") // Last octet masked for GDPR (e.g., 192.168.1.0)
  userAgent     String   @map("user_agent")
  country       String?
  city          String?
  device        String   // desktop, mobile, tablet
  browser       String
  os            String
  referrer      String?
  landingPage   String   @map("landing_page")
  cookieConsent Json     @map("cookie_consent") // {analytics: boolean, marketing: boolean, functional: boolean}
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  pageViews     AnalyticsPageView[]
  events        AnalyticsEvent[]
  conversions   AnalyticsConversion[]

  @@index([sessionId])
  @@index([createdAt(sort: Desc)])
  @@index([device])
  @@index([browser])
  @@map("analytics_sessions")
}

model AnalyticsPageView {
  id          String   @id @default(uuid())
  sessionId   String   @map("session_id")
  path        String
  title       String
  referrer    String?
  duration    Int?     // seconds spent on page
  scrollDepth Int?     @map("scroll_depth") // percentage scrolled (0-100)
  exitPage    Boolean  @default(false) @map("exit_page")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  session     AnalyticsSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  @@index([sessionId])
  @@index([path])
  @@index([createdAt(sort: Desc)])
  @@map("analytics_pageviews")
}

model AnalyticsEvent {
  id          String   @id @default(uuid())
  sessionId   String   @map("session_id")
  eventType   String   @map("event_type") // click, form_submit, cta_click, download, video_play, etc.
  eventName   String   @map("event_name")
  eventData   Json?    @map("event_data") // Additional event metadata
  page        String
  elementId   String?  @map("element_id")
  elementText String?  @map("element_text")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  session     AnalyticsSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  @@index([sessionId])
  @@index([eventType])
  @@index([eventName])
  @@index([createdAt(sort: Desc)])
  @@map("analytics_events")
}

model AnalyticsConversion {
  id             String   @id @default(uuid())
  sessionId      String   @map("session_id")
  conversionType String   @map("conversion_type") // demo_request, contact_form, download, newsletter_signup, etc.
  formData       Json?    @map("form_data") // Anonymized form data
  value          Float?   // Estimated conversion value in KRW
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  session        AnalyticsSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  @@index([sessionId])
  @@index([conversionType])
  @@index([createdAt(sort: Desc)])
  @@map("analytics_conversions")
}

// ============================================================
// POPUPS
// ============================================================

enum PopupDisplayType {
  modal
  banner
  corner
}

model Popup {
  id              String            @id @default(uuid())
  title           String
  content         String?           @db.Text
  imageUrl        String?           @map("image_url")
  linkUrl         String?           @map("link_url")
  displayType     PopupDisplayType  @default(modal) @map("display_type")
  isActive        Boolean           @default(false) @map("is_active")
  startDate       DateTime?         @map("start_date")
  endDate         DateTime?         @map("end_date")
  zIndex          Int               @default(1000) @map("z_index")
  showOncePerDay  Boolean           @default(true) @map("show_once_per_day")
  position        String?           // JSON: {top, right, bottom, left}
  size            String?           // JSON: {width, height}
  backgroundColor String            @default("#ffffff") @map("background_color")

  deletedAt       DateTime?         @map("deleted_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  @@index([isActive, deletedAt])
  @@index([startDate, endDate])
  @@map("popups")
}

// ============================================================
// DEMO REQUESTS
// ============================================================

enum DemoRequestStatus {
  NEW
  SCHEDULED
  COMPLETED
  CANCELLED
}

model DemoRequest {
  id                String             @id @default(uuid())

  // Step 1: Company Information
  companyName       String             @map("company_name")
  contactName       String             @map("contact_name")
  email             String
  phone             String
  companySize       String             @map("company_size") // 1-10, 11-50, 51-200, 201-1000, 1000+

  // Step 2: Interest & Requirements
  productInterests  String[]           @map("product_interests") // DTG Series5, Carbon API, GLEC Cloud, AI DTG
  useCase           String             @map("use_case") @db.Text
  currentSolution   String?            @map("current_solution")
  monthlyShipments  String             @map("monthly_shipments") // <100, 100-1000, 1000-10000, 10000+

  // Step 3: Schedule Demo
  preferredDate     DateTime           @map("preferred_date")
  preferredTime     String             @map("preferred_time") // HH:MM format
  additionalMessage String?            @map("additional_message") @db.Text

  // Metadata
  status            DemoRequestStatus  @default(NEW)
  privacyConsent    Boolean            @map("privacy_consent")
  ipAddress         String?            @map("ip_address")
  notes             String?            @db.Text // Admin notes

  // Relations
  assignedToId      String?            @map("assigned_to_id")
  assignedTo        User?              @relation("DemoAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)

  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@index([status, createdAt(sort: Desc)])
  @@index([email])
  @@index([preferredDate])
  @@map("demo_requests")
}

// ============================================================
// AUDIT LOGS
// ============================================================

model AuditLog {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  action      AuditAction // LOGIN, CREATE, UPDATE, DELETE
  resource    String      // notices, events, contacts, demo_requests, etc.
  resourceId  String?     @map("resource_id") // ID of affected resource

  changes     Json?       // Before/after diff
  ipAddress   String      @map("ip_address")
  userAgent   String      @map("user_agent") @db.Text

  createdAt   DateTime    @default(now()) @map("created_at")

  @@index([userId, createdAt(sort: Desc)])
  @@index([action])
  @@index([resource])
  @@index([createdAt(sort: Desc)])
  @@map("audit_logs")
}

// ============================================================
// CONTENT RANKINGS
// ============================================================

model ContentRanking {
  id            String     @id @default(uuid())
  contentType   String     @map("content_type") // notice, press, blog, video, library
  contentId     String     @map("content_id")
  contentTitle  String     @map("content_title")

  viewCount     Int        @default(0) @map("view_count")
  clickCount    Int        @default(0) @map("click_count")
  downloadCount Int        @default(0) @map("download_count")

  periodType    PeriodType @map("period_type") // DAILY, WEEKLY, MONTHLY, ALL_TIME
  periodStart   DateTime   @map("period_start")
  periodEnd     DateTime   @map("period_end")

  rank          Int
  previousRank  Int?       @map("previous_rank")
  rankChange    Int?       @map("rank_change") // +5, -2, etc.

  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@unique([contentType, contentId, periodType, periodStart])
  @@index([periodType, periodStart(sort: Desc)])
  @@index([rank])
  @@map("content_rankings")
}

const { chromium } = require('@playwright/test');
const fs = require('fs');
const path = require('path');

const ENV_VARS = [
  {
    name: 'RESEND_WEBHOOK_SECRET',
    value: 'Oau+aChv++aRbJ2Nyf+ks81PwGJ8bl2UGi91WVC1vqc=',
  },
  {
    name: 'CRON_SECRET',
    value: 'OjZEePvm+x5JqHn13bVCBQn0rTCDngh6492hqIhwRaA=',
  },
  {
    name: 'ADMIN_NOTIFICATION_EMAIL',
    value: 'oillex.co.kr@gmail.com',
  },
];

const SCREENSHOTS_DIR = path.join(__dirname, 'screenshots');

if (!fs.existsSync(SCREENSHOTS_DIR)) {
  fs.mkdirSync(SCREENSHOTS_DIR, { recursive: true });
}

async function waitForManualLogin(page) {
  console.log('\n' + '='.repeat(70));
  console.log('‚è∏Ô∏è  Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Ïó¥Î†∏ÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏ÏùÑ ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî.');
  console.log('‚è∏Ô∏è  Î°úÍ∑∏Ïù∏Ïù¥ ÏôÑÎ£åÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ïÏùÑ ÏãúÏûëÌï©ÎãàÎã§.');
  console.log('‚è∏Ô∏è  ÎåÄÍ∏∞ ÏãúÍ∞Ñ: Î¨¥Ï†úÌïú');
  console.log('='.repeat(70) + '\n');

  // Î¨¥Ìïú ÎåÄÍ∏∞: URLÏù¥ login/verifyÍ∞Ä ÏïÑÎãå vercel.comÏúºÎ°ú Î≥ÄÍ≤ΩÎê† ÎïåÍπåÏßÄ
  let attempts = 0;
  while (true) {
    const currentUrl = page.url();

    // Î°úÍ∑∏Ïù∏ ÏôÑÎ£å Í∞êÏßÄ: login/verify ÌéòÏù¥ÏßÄÍ∞Ä ÏïÑÎãàÍ≥†, vercel.com ÎèÑÎ©îÏù∏Ïù∏ Í≤ΩÏö∞
    if (currentUrl.includes('vercel.com') &&
        !currentUrl.includes('/login') &&
        !currentUrl.includes('/verify')) {
      console.log('‚úÖ Î°úÍ∑∏Ïù∏ Í∞êÏßÄÎê®! ÏûêÎèôÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§...\n');
      return true;
    }

    attempts++;
    if (attempts % 10 === 0) {
      console.log(`   ÎåÄÍ∏∞ Ï§ë... (${attempts * 2}Ï¥à Í≤ΩÍ≥º)`);
    }

    await page.waitForTimeout(2000);
  }
}

async function updateVercelEnv() {
  const browser = await chromium.launch({
    headless: false,
    args: ['--start-maximized']
  });

  const context = await browser.newContext({
    viewport: null
  });

  const page = await context.newPage();

  const report = {
    loginSuccess: false,
    deletedVariables: [],
    addedVariables: [],
    screenshots: [],
    redeploymentTriggered: false,
    errors: [],
  };

  try {
    console.log('üöÄ Vercel ÌôòÍ≤Ω Î≥ÄÏàò ÏûêÎèô ÏÑ§Ï†ï ÏãúÏûë...\n');
    console.log('üìç Step 1: Vercel Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ Ïó¥Í∏∞...');

    await page.goto('https://vercel.com/login', { waitUntil: 'networkidle', timeout: 60000 });
    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, '01-login-page.png'), fullPage: true });
    report.screenshots.push('01-login-page.png');

    // ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏Ïù∏Ìï† ÎïåÍπåÏßÄ Î¨¥Ìïú ÎåÄÍ∏∞
    await waitForManualLogin(page);
    report.loginSuccess = true;

    console.log('‚è≥ Step 2: ÎåÄÏãúÎ≥¥Îìú Î°úÎî© ÎåÄÍ∏∞...');
    await page.waitForLoadState('networkidle', { timeout: 30000 });
    await page.waitForTimeout(3000);

    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, '02-dashboard.png'), fullPage: true });
    report.screenshots.push('02-dashboard.png');

    console.log('üìç Step 3: Environment Variables ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô...');
    await page.goto('https://vercel.com/glecdevs-projects/glec-website/settings/environment-variables', {
      waitUntil: 'domcontentloaded',
      timeout: 120000
    });
    await page.waitForTimeout(3000);
    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, '03-env-vars-page.png'), fullPage: true });
    report.screenshots.push('03-env-vars-page.png');

    console.log('\nüóëÔ∏è  Step 4: Í∏∞Ï°¥ Î≥ÄÏàò ÏÇ≠Ï†ú Ï§ë...');
    for (const envVar of ENV_VARS) {
      try {
        // Î≥ÄÏàò Ìñâ Ï∞æÍ∏∞ - Ïó¨Îü¨ ÏÖÄÎ†âÌÑ∞ ÏãúÎèÑ
        const selectors = [
          `tr:has-text("${envVar.name}")`,
          `div[data-testid*="env-var"]:has-text("${envVar.name}")`,
          `div:has-text("${envVar.name}"):has(button)`
        ];

        let varRow = null;
        for (const selector of selectors) {
          varRow = page.locator(selector).first();
          if (await varRow.isVisible({ timeout: 2000 }).catch(() => false)) {
            break;
          }
        }

        if (varRow && await varRow.isVisible({ timeout: 2000 }).catch(() => false)) {
          console.log(`   üîç ${envVar.name} Ï∞æÏùå. ÏÇ≠Ï†ú ÏãúÎèÑ...`);

          // More Î≤ÑÌäº Ï∞æÍ∏∞
          const moreButtonSelectors = [
            'button[aria-label="More"]',
            'button:has-text("...")',
            'button[aria-haspopup="menu"]',
            'button svg[data-testid="geist-icon"]'
          ];

          let clicked = false;
          for (const selector of moreButtonSelectors) {
            const moreButton = varRow.locator(selector).first();
            if (await moreButton.isVisible({ timeout: 1000 }).catch(() => false)) {
              await moreButton.click();
              await page.waitForTimeout(1000);
              clicked = true;
              break;
            }
          }

          if (clicked) {
            // Delete Î≤ÑÌäº ÌÅ¥Î¶≠
            const deleteSelectors = [
              'button:has-text("Delete")',
              '[role="menuitem"]:has-text("Delete")',
              'div:has-text("Delete")'
            ];

            for (const selector of deleteSelectors) {
              const deleteButton = page.locator(selector).first();
              if (await deleteButton.isVisible({ timeout: 2000 }).catch(() => false)) {
                await deleteButton.click();
                await page.waitForTimeout(1000);
                break;
              }
            }

            // ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ÏóêÏÑú Delete Î≤ÑÌäº ÌÅ¥Î¶≠
            const confirmSelectors = [
              'button:has-text("Delete")',
              'button:has-text("Confirm")'
            ];

            for (const selector of confirmSelectors) {
              const confirmButton = page.locator(selector).first();
              if (await confirmButton.isVisible({ timeout: 3000 }).catch(() => false)) {
                await confirmButton.click();
                await page.waitForTimeout(2000);
                break;
              }
            }

            report.deletedVariables.push(envVar.name);
            console.log(`   ‚úÖ ${envVar.name} ÏÇ≠Ï†ú ÏôÑÎ£å`);
          }
        } else {
          console.log(`   ‚ÑπÔ∏è  ${envVar.name} ÏóÜÏùå (Ïä§ÌÇµ)`);
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  ${envVar.name} ÏÇ≠Ï†ú Ïã§Ìå®: ${error.message}`);
      }
    }

    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, '04-after-deletion.png'), fullPage: true });
    report.screenshots.push('04-after-deletion.png');

    console.log('\n‚ûï Step 5: ÏÉà ÌôòÍ≤Ω Î≥ÄÏàò Ï∂îÍ∞Ä Ï§ë...');
    for (const envVar of ENV_VARS) {
      try {
        console.log(`   üìù ${envVar.name} Ï∂îÍ∞Ä Ï§ë...`);

        // Add New Î≤ÑÌäº Ï∞æÍ∏∞
        const addButtonSelectors = [
          'button:has-text("Add New")',
          'button:has-text("Add")',
          'button[aria-label*="Add"]'
        ];

        let addClicked = false;
        for (const selector of addButtonSelectors) {
          const addButton = page.locator(selector).first();
          if (await addButton.isVisible({ timeout: 3000 }).catch(() => false)) {
            await addButton.click();
            await page.waitForTimeout(2000);
            addClicked = true;
            break;
          }
        }

        if (!addClicked) {
          throw new Error('Add New Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        }

        // Name ÏûÖÎ†•
        const nameSelectors = [
          'input[name="key"]',
          'input[name="name"]',
          'input[placeholder*="NAME"]',
          'input[placeholder*="Key"]'
        ];

        let nameInput = null;
        for (const selector of nameSelectors) {
          nameInput = page.locator(selector).first();
          if (await nameInput.isVisible({ timeout: 2000 }).catch(() => false)) {
            break;
          }
        }

        if (nameInput) {
          await nameInput.fill(envVar.name);
          await page.waitForTimeout(500);
        }

        // Value ÏûÖÎ†•
        const valueSelectors = [
          'textarea[name="value"]',
          'textarea[placeholder*="VALUE"]',
          'textarea[placeholder*="Value"]',
          'input[name="value"]'
        ];

        let valueInput = null;
        for (const selector of valueSelectors) {
          valueInput = page.locator(selector).first();
          if (await valueInput.isVisible({ timeout: 2000 }).catch(() => false)) {
            break;
          }
        }

        if (valueInput) {
          await valueInput.click();
          await page.waitForTimeout(200);

          // Í∞í ÏûÖÎ†• - Í∞úÌñâ ÏóÜÏù¥ Ï†ïÌôïÌïòÍ≤å
          await valueInput.fill('');
          await page.waitForTimeout(200);
          await valueInput.type(envVar.value, { delay: 10 });
          await page.waitForTimeout(500);
        }

        // Production Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÑ†ÌÉù
        const prodCheckboxSelectors = [
          'input[type="checkbox"][value="production"]',
          'label:has-text("Production") input[type="checkbox"]',
          'input[id*="production"]'
        ];

        for (const selector of prodCheckboxSelectors) {
          const prodCheckbox = page.locator(selector).first();
          if (await prodCheckbox.isVisible({ timeout: 2000 }).catch(() => false)) {
            const isChecked = await prodCheckbox.isChecked().catch(() => false);
            if (!isChecked) {
              await prodCheckbox.check();
              await page.waitForTimeout(500);
            }
            break;
          }
        }

        await page.screenshot({ path: path.join(SCREENSHOTS_DIR, `05-${envVar.name}-filled.png`), fullPage: true });
        report.screenshots.push(`05-${envVar.name}-filled.png`);

        // Save Î≤ÑÌäº ÌÅ¥Î¶≠
        const saveButton = page.locator('button:has-text("Save")').first();
        await saveButton.click();
        await page.waitForTimeout(3000);

        report.addedVariables.push(envVar.name);
        console.log(`   ‚úÖ ${envVar.name} Ï∂îÍ∞Ä ÏôÑÎ£å`);
      } catch (error) {
        const errorMsg = `${envVar.name} Ï∂îÍ∞Ä Ïã§Ìå®: ${error.message}`;
        console.log(`   ‚ùå ${errorMsg}`);
        report.errors.push(errorMsg);
        await page.screenshot({ path: path.join(SCREENSHOTS_DIR, `error-${envVar.name}.png`), fullPage: true });
        report.screenshots.push(`error-${envVar.name}.png`);
      }
    }

    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, '06-all-vars-added.png'), fullPage: true });
    report.screenshots.push('06-all-vars-added.png');

    console.log('\nüîÑ Step 6: Ïû¨Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞ Ï§ë...');
    await page.goto('https://vercel.com/glecdevs-projects/glec-website', {
      waitUntil: 'networkidle',
      timeout: 60000
    });
    await page.waitForTimeout(3000);

    // Deployments ÌÉ≠ ÌÅ¥Î¶≠
    const deploymentsSelectors = [
      'a:has-text("Deployments")',
      'button:has-text("Deployments")',
      'nav a[href*="deployments"]'
    ];

    for (const selector of deploymentsSelectors) {
      const deploymentsTab = page.locator(selector).first();
      if (await deploymentsTab.isVisible({ timeout: 2000 }).catch(() => false)) {
        await deploymentsTab.click();
        await page.waitForTimeout(3000);
        break;
      }
    }

    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, '07-deployments-page.png'), fullPage: true });
    report.screenshots.push('07-deployments-page.png');

    // ÏµúÏã† deploymentÏùò More Î≤ÑÌäº ÌÅ¥Î¶≠
    const latestDeployment = page.locator('tr, div[data-testid="deployment-row"]').first();
    const deploymentMoreButton = latestDeployment.locator('button[aria-label="More"], button:has-text("..."), button[aria-haspopup="menu"]').first();

    if (await deploymentMoreButton.isVisible({ timeout: 3000 }).catch(() => false)) {
      await deploymentMoreButton.click();
      await page.waitForTimeout(1000);

      // Redeploy ÌÅ¥Î¶≠
      const redeployButton = page.locator('button:has-text("Redeploy"), [role="menuitem"]:has-text("Redeploy")').first();
      if (await redeployButton.isVisible({ timeout: 2000 }).catch(() => false)) {
        await redeployButton.click();
        await page.waitForTimeout(2000);

        // ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏
        const confirmButton = page.locator('button:has-text("Redeploy"), button:has-text("Confirm")').first();
        if (await confirmButton.isVisible({ timeout: 3000 }).catch(() => false)) {
          await confirmButton.click();
          await page.waitForTimeout(3000);
          report.redeploymentTriggered = true;
          console.log('‚úÖ Ïû¨Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞ ÏôÑÎ£å!');
        }
      }
    }

    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, '08-redeployment-triggered.png'), fullPage: true });
    report.screenshots.push('08-redeployment-triggered.png');

    console.log('\n‚úÖ Î™®Îì† ÏûëÏóÖ ÏôÑÎ£å!');
    console.log('‚è≥ 10Ï¥à ÌõÑ Î∏åÎùºÏö∞Ï†ÄÎ•º Îã´ÏäµÎãàÎã§...');
    await page.waitForTimeout(10000);

  } catch (error) {
    console.error('\n‚ùå Ïò§Î•ò Î∞úÏÉù:', error.message);
    report.errors.push(error.message);
    await page.screenshot({ path: path.join(SCREENSHOTS_DIR, 'error-final.png'), fullPage: true });
    report.screenshots.push('error-final.png');
  } finally {
    await browser.close();
  }

  return report;
}

// Ïã§Ìñâ
(async () => {
  console.log('\n' + '='.repeat(70));
  console.log('üöÄ Vercel ÌôòÍ≤Ω Î≥ÄÏàò ÏûêÎèô ÏÑ§Ï†ï (ÏàòÎèô Î°úÍ∑∏Ïù∏ Î≤ÑÏ†Ñ)');
  console.log('='.repeat(70));
  console.log('\nüìã ÏÑ§Ï†ïÌï† Î≥ÄÏàò:');
  ENV_VARS.forEach(v => console.log(`   ‚Ä¢ ${v.name}`));
  console.log('');

  const report = await updateVercelEnv();

  console.log('\n' + '='.repeat(70));
  console.log('üìä ÏµúÏ¢Ö Î≥¥Í≥†ÏÑú');
  console.log('='.repeat(70));
  console.log(`‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ: ${report.loginSuccess}`);
  console.log(`üóëÔ∏è  ÏÇ≠Ï†úÎêú Î≥ÄÏàò: ${report.deletedVariables.length > 0 ? report.deletedVariables.join(', ') : 'ÏóÜÏùå'}`);
  console.log(`‚ûï Ï∂îÍ∞ÄÎêú Î≥ÄÏàò: ${report.addedVariables.length > 0 ? report.addedVariables.join(', ') : 'ÏóÜÏùå'}`);
  console.log(`üîÑ Ïû¨Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞: ${report.redeploymentTriggered ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);
  console.log(`üì∏ Ïä§ÌÅ¨Î¶∞ÏÉ∑: ${report.screenshots.length}Í∞ú (${SCREENSHOTS_DIR})`);

  if (report.errors.length > 0) {
    console.log(`\n‚ùå Ïò§Î•ò (${report.errors.length}Í±¥):`);
    report.errors.forEach((err, idx) => console.log(`   ${idx + 1}. ${err}`));
  }

  console.log('='.repeat(70));

  const reportPath = path.join(SCREENSHOTS_DIR, 'report-manual-login.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`\nüìù ÏÉÅÏÑ∏ Î≥¥Í≥†ÏÑú: ${reportPath}\n`);

  process.exit(report.errors.length > 0 ? 1 : 0);
})();

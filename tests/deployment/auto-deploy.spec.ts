import { test, expect, type Page } from '@playwright/test';
import * as fs from 'fs';
import * as path from 'path';

/**
 * GLEC Website - Playwright Í∏∞Î∞ò ÏûêÎèô Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏
 *
 * Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Îã§Ïùå ÏûëÏóÖÏùÑ ÏûêÎèôÏúºÎ°ú ÏàòÌñâÌï©ÎãàÎã§:
 * 1. GitHub Î°úÍ∑∏Ïù∏
 * 2. GitHub Ï†ÄÏû•ÏÜå ÏÉùÏÑ± (glecdev/website)
 * 3. Cloudflare Dashboard Î°úÍ∑∏Ïù∏
 * 4. Cloudflare PagesÏôÄ GitHub Ïó∞Îèô
 * 5. ÎπåÎìú ÏÑ§Ï†ï Íµ¨ÏÑ±
 * 6. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
 * 7. Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞ Î∞è Î™®ÎãàÌÑ∞ÎßÅ
 */

test.describe('GLEC Website - Automated Deployment', () => {
  let page: Page;

  test.beforeAll(async ({ browser }) => {
    page = await browser.newPage();

    // ÌÉÄÏûÑÏïÑÏõÉ Ï¶ùÍ∞Ä (Î∞∞Ìè¨Îäî ÏãúÍ∞ÑÏù¥ Ïò§Îûò Í±∏Î¶º)
    test.setTimeout(1800000); // 30Î∂Ñ
  });

  test.afterAll(async () => {
    await page.close();
  });

  test('Step 1: GitHub Login', async () => {
    console.log('üîê GitHub Î°úÍ∑∏Ïù∏ ÏãúÏûë...');

    await page.goto('https://github.com/login');

    // GitHub Ïù¥Î©îÏùº/ÏÇ¨Ïö©ÏûêÎ™Ö ÏûÖÎ†•
    await page.fill('input[name="login"]', process.env.GITHUB_USERNAME || 'glecdev');

    // GitHub ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•
    await page.fill('input[name="password"]', process.env.GITHUB_PASSWORD || '');

    // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº ÌÅ¥Î¶≠
    await page.click('input[type="submit"]');

    // 2FAÍ∞Ä ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ ÎåÄÍ∏∞
    const has2FA = await page.locator('input[name="app_otp"]').isVisible({ timeout: 5000 }).catch(() => false);

    if (has2FA) {
      console.log('‚ö†Ô∏è  2FA Ïù∏Ï¶ù ÌïÑÏöî - ÏàòÎèôÏúºÎ°ú ÏΩîÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî (60Ï¥à ÎåÄÍ∏∞)');
      await page.waitForTimeout(60000); // 1Î∂Ñ ÎåÄÍ∏∞
    }

    // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌôïÏù∏
    await expect(page.locator('[aria-label="Create new..."]')).toBeVisible({ timeout: 30000 });

    console.log('‚úÖ GitHub Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ');
  });

  test('Step 2: Create GitHub Repository', async () => {
    console.log('üì¶ GitHub Ï†ÄÏû•ÏÜå ÏÉùÏÑ± ÏãúÏûë...');

    // Ï†ÄÏû•ÏÜåÍ∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
    await page.goto('https://github.com/glecdev/website');

    const repoExists = await page.locator('h1:has-text("glecdev/website")').isVisible({ timeout: 5000 }).catch(() => false);

    if (repoExists) {
      console.log('‚úÖ Ï†ÄÏû•ÏÜåÍ∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. Îã§Ïùå Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.');
      return;
    }

    // ÏÉà Ï†ÄÏû•ÏÜå ÏÉùÏÑ±
    await page.goto('https://github.com/new');

    // Organization ÏÑ†ÌÉù (glecdev)
    const orgSelect = await page.locator('select[name="owner"]').isVisible({ timeout: 5000 }).catch(() => false);
    if (orgSelect) {
      await page.selectOption('select[name="owner"]', { label: 'glecdev' });
    }

    // Ï†ÄÏû•ÏÜå Ïù¥Î¶Ñ ÏûÖÎ†•
    await page.fill('input[name="repository[name]"]', 'website');

    // Description ÏûÖÎ†•
    await page.fill('input[name="repository[description]"]', 'GLEC - ISO-14083 Íµ≠Ï†úÌëúÏ§Ä Î¨ºÎ•ò ÌÉÑÏÜåÎ∞∞Ï∂ú Ï∏°Ï†ï ÏÜîÎ£®ÏÖò');

    // Public ÏÑ†ÌÉù
    await page.click('input[value="public"]');

    // Initialize ÏòµÏÖò Î™®Îëê Ï≤¥ÌÅ¨ Ìï¥Ï†ú (Ïù¥ÎØ∏ Î°úÏª¨Ïóê ÏΩîÎìúÍ∞Ä ÏûàÏùå)
    const initCheckbox = await page.locator('input[name="repository[auto_init]"]').isVisible({ timeout: 2000 }).catch(() => false);
    if (initCheckbox) {
      await page.uncheck('input[name="repository[auto_init]"]');
    }

    // Ï†ÄÏû•ÏÜå ÏÉùÏÑ± Î≤ÑÌäº ÌÅ¥Î¶≠
    await page.click('button:has-text("Create repository")');

    // ÏÉùÏÑ± ÏôÑÎ£å ÎåÄÍ∏∞
    await expect(page.locator('h1:has-text("Quick setup")')).toBeVisible({ timeout: 10000 });

    console.log('‚úÖ GitHub Ï†ÄÏû•ÏÜå ÏÉùÏÑ± ÏÑ±Í≥µ: https://github.com/glecdev/website');
  });

  test('Step 3: Cloudflare Dashboard Login', async () => {
    console.log('üîê Cloudflare Dashboard Î°úÍ∑∏Ïù∏ ÏãúÏûë...');

    await page.goto('https://dash.cloudflare.com/login');

    // Ïù¥Î©îÏùº ÏûÖÎ†•
    await page.fill('input[type="email"]', 'contact@glec.io');

    // Next Î≤ÑÌäº ÌÅ¥Î¶≠
    await page.click('button:has-text("Next")');

    // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• ÎåÄÍ∏∞
    await page.waitForSelector('input[type="password"]', { timeout: 10000 });

    console.log('‚ö†Ô∏è  Cloudflare ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏàòÎèôÏúºÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî (60Ï¥à ÎåÄÍ∏∞)');
    await page.waitForTimeout(60000); // 1Î∂Ñ ÎåÄÍ∏∞

    // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌôïÏù∏ (Dashboard Î°úÎî©)
    await expect(page.locator('text=/Workers & Pages|Dashboard/i')).toBeVisible({ timeout: 30000 });

    console.log('‚úÖ Cloudflare Dashboard Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ');
  });

  test('Step 4: Navigate to Pages Project', async () => {
    console.log('üìÇ Pages ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Îèô Ï§ë...');

    // Workers & Pages Î©îÎâ¥ ÌÅ¥Î¶≠
    await page.click('a:has-text("Workers & Pages")');

    await page.waitForTimeout(2000);

    // glec-website ÌîÑÎ°úÏ†ùÌä∏ Ï∞æÍ∏∞
    const projectCard = page.locator('text=glec-website').first();
    await expect(projectCard).toBeVisible({ timeout: 10000 });

    // ÌîÑÎ°úÏ†ùÌä∏ ÌÅ¥Î¶≠
    await projectCard.click();

    await page.waitForTimeout(2000);

    console.log('‚úÖ glec-website ÌîÑÎ°úÏ†ùÌä∏ Ïó¥Í∏∞ ÏÑ±Í≥µ');
  });

  test('Step 5: Connect to Git', async () => {
    console.log('üîó GitHub Ïó∞Îèô ÏãúÏûë...');

    // Settings ÌÉ≠ ÌÅ¥Î¶≠
    await page.click('a:has-text("Settings")');

    await page.waitForTimeout(2000);

    // Builds & deployments ÏÑπÏÖòÏúºÎ°ú Ïä§ÌÅ¨Î°§
    await page.locator('text=Builds & deployments').scrollIntoViewIfNeeded();

    await page.waitForTimeout(1000);

    // Connect to Git Î≤ÑÌäº ÌÅ¥Î¶≠
    const connectButton = page.locator('button:has-text("Connect to Git"), a:has-text("Connect to Git")').first();
    await connectButton.click();

    await page.waitForTimeout(2000);

    // GitHub ÏÑ†ÌÉù
    await page.click('button:has-text("GitHub"), a:has-text("GitHub")');

    await page.waitForTimeout(2000);

    // GitHub OAuth ÌåùÏóÖ Ï≤òÎ¶¨
    const [popup] = await Promise.all([
      page.waitForEvent('popup'),
      // ÌåùÏóÖ Ìä∏Î¶¨Í±∞ ÎåÄÍ∏∞
    ]);

    if (popup) {
      // Authorize Cloudflare Workers & Pages
      await popup.click('button:has-text("Authorize")');
      await popup.waitForTimeout(3000);
    }

    console.log('‚úÖ GitHub Ïù∏Ï¶ù ÏôÑÎ£å');
  });

  test('Step 6: Select Repository', async () => {
    console.log('üì¶ Ï†ÄÏû•ÏÜå ÏÑ†ÌÉù Ï§ë...');

    await page.waitForTimeout(3000);

    // Organization ÏÑ†ÌÉù (glecdev)
    const orgSelect = await page.locator('select').first().isVisible({ timeout: 5000 }).catch(() => false);
    if (orgSelect) {
      await page.selectOption('select', { label: 'glecdev' });
      await page.waitForTimeout(2000);
    }

    // Repository ÏÑ†ÌÉù (website)
    await page.click('div:has-text("website"), button:has-text("website")');

    await page.waitForTimeout(2000);

    // Begin setup ÌÅ¥Î¶≠
    await page.click('button:has-text("Begin setup")');

    await page.waitForTimeout(3000);

    console.log('‚úÖ Ï†ÄÏû•ÏÜå ÏÑ†ÌÉù ÏôÑÎ£å');
  });

  test('Step 7: Configure Build Settings', async () => {
    console.log('‚öôÔ∏è  ÎπåÎìú ÏÑ§Ï†ï Íµ¨ÏÑ± Ï§ë...');

    // Framework presetÏù¥ Next.jsÎ°ú ÏûêÎèô Í∞êÏßÄÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    const frameworkSelect = page.locator('select[name="framework"]');
    const currentFramework = await frameworkSelect.inputValue();

    if (currentFramework !== 'nextjs') {
      await frameworkSelect.selectOption({ label: 'Next.js' });
    }

    console.log('‚úÖ Framework: Next.js ÏÑ†ÌÉùÎê®');

    // Build command ÌôïÏù∏/ÏÑ§Ï†ï
    const buildCommand = page.locator('input[name="build_command"]');
    await buildCommand.clear();
    await buildCommand.fill('npm run build');

    console.log('‚úÖ Build command: npm run build');

    // Build output directory ÌôïÏù∏/ÏÑ§Ï†ï
    const outputDir = page.locator('input[name="build_output_directory"]');
    await outputDir.clear();
    await outputDir.fill('.next');

    console.log('‚úÖ Output directory: .next');

    // Root directory ÏÑ§Ï†ï
    const rootDir = page.locator('input[name="root_directory"]');
    if (await rootDir.isVisible({ timeout: 2000 }).catch(() => false)) {
      await rootDir.clear();
      await rootDir.fill('glec-website');
      console.log('‚úÖ Root directory: glec-website');
    }

    await page.waitForTimeout(2000);

    console.log('‚úÖ ÎπåÎìú ÏÑ§Ï†ï Íµ¨ÏÑ± ÏôÑÎ£å');
  });

  test('Step 8: Add Environment Variables', async () => {
    console.log('üîê ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï ÏãúÏûë...');

    // Environment variables ÏÑπÏÖòÏúºÎ°ú Ïù¥Îèô
    await page.click('text=Environment variables');

    await page.waitForTimeout(2000);

    // ÌôòÍ≤Ω Î≥ÄÏàò Î™©Î°ù
    const envVars = [
      {
        name: 'DATABASE_URL',
        value: process.env.DATABASE_URL || '',
        secret: true,
        production: true
      },
      {
        name: 'JWT_SECRET',
        value: process.env.JWT_SECRET || '',
        secret: true,
        production: true
      },
      {
        name: 'RESEND_API_KEY',
        value: process.env.RESEND_API_KEY || '',
        secret: true,
        production: true
      },
      {
        name: 'RESEND_FROM_EMAIL',
        value: 'noreply@glec.io',
        secret: false,
        production: true
      },
      {
        name: 'R2_ACCOUNT_ID',
        value: 'c3f6cde2ef3a46eb48b8e215535a4a9e',
        secret: false,
        production: true
      },
      {
        name: 'R2_ACCESS_KEY_ID',
        value: process.env.R2_ACCESS_KEY_ID || '',
        secret: true,
        production: true
      },
      {
        name: 'R2_SECRET_ACCESS_KEY',
        value: process.env.R2_SECRET_ACCESS_KEY || '',
        secret: true,
        production: true
      },
      {
        name: 'R2_BUCKET_NAME',
        value: 'glec-files',
        secret: false,
        production: true
      },
      {
        name: 'ADMIN_EMAIL',
        value: 'admin@glec.io',
        secret: false,
        production: true
      },
      {
        name: 'ADMIN_PASSWORD_HASH',
        value: process.env.ADMIN_PASSWORD_HASH || '',
        secret: true,
        production: true
      }
    ];

    for (const envVar of envVars) {
      if (!envVar.value) {
        console.log(`‚ö†Ô∏è  ${envVar.name}: Í∞íÏù¥ ÏóÜÏäµÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§.`);
        continue;
      }

      console.log(`üìù ÌôòÍ≤Ω Î≥ÄÏàò Ï∂îÍ∞Ä: ${envVar.name}`);

      // Add variable Î≤ÑÌäº ÌÅ¥Î¶≠
      await page.click('button:has-text("Add variable")');

      await page.waitForTimeout(1000);

      // Variable name ÏûÖÎ†•
      await page.fill('input[placeholder="Variable name"]', envVar.name);

      // Value ÏûÖÎ†•
      await page.fill('input[placeholder="Value"], textarea[placeholder="Value"]', envVar.value);

      // Type ÏÑ†ÌÉù (Secret or Plain text)
      if (envVar.secret) {
        await page.click('label:has-text("Secret")');
      } else {
        await page.click('label:has-text("Plain text")');
      }

      // Environment ÏÑ†ÌÉù
      if (envVar.production) {
        await page.click('label:has-text("Production")');
      }

      // Save Î≤ÑÌäº ÌÅ¥Î¶≠
      await page.click('button:has-text("Save")');

      await page.waitForTimeout(2000);

      console.log(`‚úÖ ${envVar.name} Ï∂îÍ∞Ä ÏôÑÎ£å`);
    }

    console.log('‚úÖ Î™®Îì† ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï ÏôÑÎ£å');
  });

  test('Step 9: Save and Deploy', async () => {
    console.log('üöÄ Î∞∞Ìè¨ ÏãúÏûë...');

    // Save and Deploy Î≤ÑÌäº ÌÅ¥Î¶≠
    await page.click('button:has-text("Save and Deploy")');

    await page.waitForTimeout(5000);

    console.log('‚úÖ Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞ ÏÑ±Í≥µ');
    console.log('üìä ÎπåÎìú Î°úÍ∑∏ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë...');
  });

  test('Step 10: Monitor Build Logs', async () => {
    console.log('üìä ÎπåÎìú Î°úÍ∑∏ Î™®ÎãàÌÑ∞ÎßÅ Ï§ë...');

    // Deployments ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
    await page.click('a:has-text("Deployments")');

    await page.waitForTimeout(3000);

    // ÏµúÏã† Î∞∞Ìè¨ ÌÅ¥Î¶≠
    const latestDeployment = page.locator('tr').first();
    await latestDeployment.click();

    await page.waitForTimeout(2000);

    // View build logs ÌÅ¥Î¶≠
    await page.click('button:has-text("View build logs"), a:has-text("View build logs")');

    await page.waitForTimeout(2000);

    // ÎπåÎìú ÏôÑÎ£åÍπåÏßÄ ÎåÄÍ∏∞ (ÏµúÎåÄ 15Î∂Ñ)
    console.log('‚è≥ ÎπåÎìú ÏôÑÎ£å ÎåÄÍ∏∞ (ÏµúÎåÄ 15Î∂Ñ)...');

    await page.waitForSelector('text=/Success|Deployed|Build complete/i', {
      timeout: 900000 // 15Î∂Ñ
    });

    console.log('‚úÖ ÎπåÎìú ÏÑ±Í≥µ!');

    // Production URL Ï∂îÏ∂ú
    const productionURL = await page.locator('a[href*="pages.dev"]').first().textContent();
    console.log(`üåê Production URL: ${productionURL}`);

    // Í≤∞Í≥ºÎ•º ÌååÏùºÎ°ú Ï†ÄÏû•
    const deploymentResult = {
      success: true,
      productionURL: productionURL,
      timestamp: new Date().toISOString(),
      message: 'Deployment completed successfully'
    };

    fs.writeFileSync(
      path.join(__dirname, '../../deployment-result.json'),
      JSON.stringify(deploymentResult, null, 2)
    );

    console.log('‚úÖ Î∞∞Ìè¨ ÏôÑÎ£å! Í≤∞Í≥ºÍ∞Ä deployment-result.jsonÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
  });

  test('Step 11: Verify Deployment', async () => {
    console.log('‚úÖ Î∞∞Ìè¨ Í≤ÄÏ¶ù ÏãúÏûë...');

    // deployment-result.json ÏùΩÍ∏∞
    const resultPath = path.join(__dirname, '../../deployment-result.json');
    const result = JSON.parse(fs.readFileSync(resultPath, 'utf-8'));

    // Production URL Ï†ëÏÜç
    await page.goto(result.productionURL);

    await page.waitForTimeout(3000);

    // Homepage Î°úÎî© ÌôïÏù∏
    await expect(page.locator('h1').first()).toBeVisible({ timeout: 10000 });

    console.log('‚úÖ Homepage Î°úÎî© ÏÑ±Í≥µ');

    // Hero section ÌôïÏù∏
    const heroVisible = await page.locator('text=/ISO-14083|GLEC|ÌÉÑÏÜåÎ∞∞Ï∂ú/i').isVisible({ timeout: 5000 }).catch(() => false);
    expect(heroVisible).toBe(true);

    console.log('‚úÖ Hero section ÌëúÏãúÎê®');

    // Navigation ÌôïÏù∏
    const navVisible = await page.locator('header, nav').first().isVisible({ timeout: 5000 }).catch(() => false);
    expect(navVisible).toBe(true);

    console.log('‚úÖ Navigation ÌëúÏãúÎê®');

    // Footer ÌôïÏù∏
    const footerVisible = await page.locator('footer').isVisible({ timeout: 5000 }).catch(() => false);
    expect(footerVisible).toBe(true);

    console.log('‚úÖ Footer ÌëúÏãúÎê®');

    // ÏΩòÏÜî ÏóêÎü¨ ÌôïÏù∏
    const consoleErrors: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });

    await page.waitForTimeout(5000);

    if (consoleErrors.length > 0) {
      console.log(`‚ö†Ô∏è  ÏΩòÏÜî ÏóêÎü¨ ${consoleErrors.length}Í∞ú Î∞úÍ≤¨:`);
      consoleErrors.forEach(err => console.log(`  - ${err}`));
    } else {
      console.log('‚úÖ ÏΩòÏÜî ÏóêÎü¨ ÏóÜÏùå');
    }

    console.log('‚úÖ Î∞∞Ìè¨ Í≤ÄÏ¶ù ÏôÑÎ£å!');
  });
});
